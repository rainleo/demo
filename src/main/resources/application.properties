## Mybatis 配置
mybatis.typeAliasesPackage=org.example.demo.domain
mybatis.mapperLocations=classpath:mapper/*.xml

#<editor-fold desc="数据库 配置">
spring.datasource.druid.primary.url=jdbc:mysql://localhost:3306/primary_demo?autoReconnect=true&useUnicode=true&characterEncoding=utf8
spring.datasource.druid.primary.username=root
spring.datasource.druid.primary.password=root
spring.datasource.druid.primary.driver-class-name=com.mysql.jdbc.Driver

spring.datasource.druid.second.url=jdbc:mysql://localhost:3306/second_demo?autoReconnect=true&useUnicode=true&characterEncoding=utf8
spring.datasource.druid.second.username=root
spring.datasource.druid.second.password=root
spring.datasource.druid.second.driver-class-name=com.mysql.jdbc.Driver
#</editor-fold>

#<editor-fold desc="第一个数据库 druid DataSource 配置">
# 连接池配置，说明请参考Druid Wiki，DruidDataSource配置属性列表
# 配置初始化大小、最小、最大
spring.datasource.druid.primary.initial-size=5
spring.datasource.druid.primary.min-idle=5
spring.datasource.druid.primary.max-active=20
#配置获取连接等待超时的时间
spring.datasource.druid.primary.max-wait=60000
#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.druid.primary.time-between-eviction-runs-millis=60000
#配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.druid.primary.min-evictable-idle-time-millis=300000

spring.datasource.druid.primary.validation-query=select 'X'
spring.datasource.druid.primary.test-while-idle=true
spring.datasource.druid.primary.test-on-borrow=false
spring.datasource.druid.primary.test-on-return=false
#打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.druid.primary.pool-prepared-statements=false
spring.datasource.druid.primary.max-pool-prepared-statement-per-connection-size=20
#配置监控统计拦截的filters
spring.datasource.druid.primary.filters=stat,log4j2,wall,mergeStat
# 合并多个DruidDataSource的监控数据
spring.datasource.druid.primary.useGloalDataSourceStat=true
#</editor-fold>

#<editor-fold desc="第二个数据库 druid DataSource 配置">
# 连接池配置，说明请参考Druid Wiki，DruidDataSource配置属性列表
# 配置初始化大小、最小、最大
spring.datasource.druid.second.initial-size=1
spring.datasource.druid.second.max-active=20
spring.datasource.druid.second.min-idle=1
#配置获取连接等待超时的时间
spring.datasource.druid.second.max-wait=100
#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.druid.second.time-between-eviction-runs-millis=60000
#配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.druid.second.min-evictable-idle-time-millis=300000

spring.datasource.druid.second.validation-query=select 'X'
spring.datasource.druid.second.test-while-idle=true
spring.datasource.druid.second.test-on-borrow=false
spring.datasource.druid.second.test-on-return=false
#打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.druid.second.pool-prepared-statements=false
spring.datasource.druid.second.max-pool-prepared-statement-per-connection-size=20
#配置监控统计拦截的filters
spring.datasource.druid.second.filters=stat,log4j2,wall
#</editor-fold>

#<editor-fold desc="Druid监控配置">

#<editor-fold desc="WebStatFilter配置(用于采集web-jdbc关联监控的数据。)">
# WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter
spring.datasource.druid.web-stat-filter.enabled=true
spring.datasource.druid.web-stat-filter.url-pattern=/*
#过滤url
spring.datasource.druid.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*
# 关闭session或者开启session
spring.datasource.druid.web-stat-filter.session-stat-enable=false
spring.datasource.druid.web-stat-filter.session-stat-max-count=1000
# 配置principalSessionName，使得druid能够知道当前的session的用户是谁 xxx.user修改为你user信息保存在session中的sessionName。
# spring.datasource.druid.web-stat-filter.principal-session-name=xxx.user
# xxx.user修改为你user信息保存在cookie中的cookieName
#spring.datasource.druid.web-stat-filter.principal-cookie-name=xxx.user
# 配置profileEnable能够监控单个url调用的sql列表。
spring.datasource.druid.web-stat-filter.profile-enable=true
#</editor-fold>

#<editor-fold desc="StatViewServlet配置(监控平台内部设置)">
# StatViewServlet配置，说明请参考Druid Wiki，配置_StatViewServlet配置
spring.datasource.druid.stat-view-servlet.enabled=true
spring.datasource.druid.stat-view-servlet.url-pattern=/druid/*
spring.datasource.druid.stat-view-servlet.reset-enable=true
spring.datasource.druid.stat-view-servlet.login-username=niewenlong
spring.datasource.druid.stat-view-servlet.login-password=niewenlong
spring.datasource.druid.stat-view-servlet.allow=
spring.datasource.druid.stat-view-servlet.deny=
#</editor-fold>

#启用Spring关联监控配置
spring.datasource.druid.aop-patterns=com.example.demo.service.*
#</editor-fold>

logging.config=classpath:log4j2-spring.xml

#<editor-fold desc="redis 配置">
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=127.0.0.1
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=123456
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=0
#</editor-fold>


#<editor-fold desc="分库分表配置">
sharding.jdbc.datasource.names=ds_0,ds_1

# 配置第一个数据源
sharding.jdbc.datasource.ds_0.type=org.apache.commons.dbcp.BasicDataSource
sharding.jdbc.datasource.ds_0.driverClassName=com.mysql.jdbc.Driver
sharding.jdbc.datasource.ds_0.url=jdbc:mysql://localhost:3306/ds_0
sharding.jdbc.datasource.ds_0.username=root
sharding.jdbc.datasource.ds_0.password=root

# 配置第二个数据源
sharding.jdbc.datasource.ds_1.type=org.apache.commons.dbcp.BasicDataSource
sharding.jdbc.datasource.ds_1.driverClassName=com.mysql.jdbc.Driver
sharding.jdbc.datasource.ds_1.url=jdbc:mysql://localhost:3306/ds_1
sharding.jdbc.datasource.ds_1.username=root
sharding.jdbc.datasource.ds_1.password=root

# 默认数据源，未配置分片规则的表将通过默认数据源定位
sharding.jdbc.config.sharding.default-data-source-name=ds_0
# 配置分库策略
sharding.jdbc.config.sharding.default-database-strategy.inline.sharding-column=user_id
sharding.jdbc.config.sharding.default-database-strategy.inline.algorithm-expression=ds_${user_id % 2}
# 配置Order表规则
sharding.jdbc.config.sharding.tables.t_order.actualDataNodes=ds_${0..1}.t_order_${0..1}
# 配置分表策略
sharding.jdbc.config.sharding.tables.t_order.tableStrategy.inline.sharding-column=order_id
sharding.jdbc.config.sharding.tables.t_order.tableStrategy.inline.algorithm-expression=t_order_${order_id % 2}
sharding.jdbc.config.sharding.tables.t_order.key-generator-column-name=order_id
#</editor-fold>





